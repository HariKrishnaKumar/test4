"""create response master tables

Revision ID: 2cc61c98225e
Revises: 810bfc6f5909
Create Date: 2025-09-04 18:01:46.574955

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '2cc61c98225e'
down_revision: Union[str, Sequence[str], None] = '810bfc6f5909'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Create question_masters table
    op.create_table('question_masters',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('question_key', sa.String(100), nullable=False),
        sa.Column('question_text', sa.Text(), nullable=False),
        sa.Column('question_order', sa.Integer(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('language', sa.String(10), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('question_key')
    )
    op.create_index(op.f('ix_question_masters_id'), 'question_masters', ['id'], unique=False)

    # Create conversation_sessions table
    op.create_table('conversation_sessions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('session_id', sa.String(255), nullable=False),
        sa.Column('device_id', sa.String(255), nullable=False),
        sa.Column('status', sa.Enum('ACTIVE', 'COMPLETED', 'ABANDONED', name='conversationstatus'), nullable=True),
        sa.Column('current_question_id', sa.Integer(), nullable=True),
        sa.Column('total_questions', sa.Integer(), nullable=True),
        sa.Column('completed_questions', sa.Integer(), nullable=True),
        sa.Column('final_preferences', sa.Text(), nullable=True),
        sa.Column('started_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('last_activity_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['current_question_id'], ['question_masters.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('session_id')
    )
    op.create_index(op.f('ix_conversation_sessions_device_id'), 'conversation_sessions', ['device_id'], unique=False)
    op.create_index(op.f('ix_conversation_sessions_id'), 'conversation_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_conversation_sessions_session_id'), 'conversation_sessions', ['session_id'], unique=False)

    # Create user_responses table
    op.create_table('user_responses',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('device_id', sa.String(255), nullable=False),
        sa.Column('session_id', sa.String(255), nullable=True),
        sa.Column('question_id', sa.Integer(), nullable=False),
        sa.Column('user_input', sa.Text(), nullable=False),
        sa.Column('input_method', sa.Enum('VOICE', 'TEXT', name='inputmethod'), nullable=False),
        sa.Column('ai_response', sa.Text(), nullable=True),
        sa.Column('extracted_preferences', sa.Text(), nullable=True),
        sa.Column('sequence_no', sa.Integer(), nullable=False),
        sa.Column('is_satisfied', sa.Boolean(), nullable=True),
        sa.Column('needs_clarification', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['question_id'], ['question_masters.id'], ),
        sa.ForeignKeyConstraint(['session_id'], ['conversation_sessions.session_id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_responses_device_id'), 'user_responses', ['device_id'], unique=False)
    op.create_index(op.f('ix_user_responses_id'), 'user_responses', ['id'], unique=False)
    op.create_index(op.f('ix_user_responses_session_id'), 'user_responses', ['session_id'], unique=False)

    # Create food_preferences table
    op.create_table('food_preferences',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('device_id', sa.String(255), nullable=False),
        sa.Column('session_id', sa.String(255), nullable=False),
        sa.Column('dietary_type', sa.String(100), nullable=True),
        sa.Column('cuisine_preference', sa.String(100), nullable=True),
        sa.Column('spice_level', sa.String(50), nullable=True),
        sa.Column('hunger_level', sa.String(50), nullable=True),
        sa.Column('allergies', sa.Text(), nullable=True),
        sa.Column('dislikes', sa.Text(), nullable=True),
        sa.Column('special_requests', sa.Text(), nullable=True),
        sa.Column('budget_range', sa.String(50), nullable=True),
        sa.Column('preferred_meal_time', sa.String(50), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['session_id'], ['conversation_sessions.session_id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_food_preferences_device_id'), 'food_preferences', ['device_id'], unique=False)
    op.create_index(op.f('ix_food_preferences_id'), 'food_preferences', ['id'], unique=False)

    # Keep existing response_masters table for backward compatibility
    op.create_table('response_masters',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('device_id', sa.Text(), nullable=False),
        sa.Column('session_id', sa.String(255), nullable=True),
        sa.Column('sequence_no', sa.String(64), nullable=False),
        sa.Column('language', sa.String(100), nullable=False),
        sa.Column('conversation_request', sa.Text(), nullable=False),
        sa.Column('conversation_response', sa.Text(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_response_masters_id'), 'response_masters', ['id'], unique=False)

    # Keep existing conversation_logs table for backward compatibility
    op.create_table('conversation_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('page_no', sa.String(100), nullable=False),
        sa.Column('message_text', sa.Text(), nullable=False),
        sa.Column('language', sa.String(100), nullable=False),
        sa.Column('response_text', sa.Text(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conversation_logs_id'), 'conversation_logs', ['id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop tables in reverse order (to handle foreign key constraints)
    op.drop_index(op.f('ix_food_preferences_id'), table_name='food_preferences')
    op.drop_index(op.f('ix_food_preferences_device_id'), table_name='food_preferences')
    op.drop_table('food_preferences')

    op.drop_index(op.f('ix_user_responses_session_id'), table_name='user_responses')
    op.drop_index(op.f('ix_user_responses_id'), table_name='user_responses')
    op.drop_index(op.f('ix_user_responses_device_id'), table_name='user_responses')
    op.drop_table('user_responses')

    op.drop_index(op.f('ix_conversation_sessions_session_id'), table_name='conversation_sessions')
    op.drop_index(op.f('ix_conversation_sessions_id'), table_name='conversation_sessions')
    op.drop_index(op.f('ix_conversation_sessions_device_id'), table_name='conversation_sessions')
    op.drop_table('conversation_sessions')

    op.drop_index(op.f('ix_question_masters_id'), table_name='question_masters')
    op.drop_table('question_masters')

    # Drop legacy tables
    op.drop_index(op.f('ix_response_masters_id'), table_name='response_masters')
    op.drop_table('response_masters')

    op.drop_index(op.f('ix_conversation_logs_id'), table_name='conversation_logs')
    op.drop_table('conversation_logs')

    # ### end Alembic commands ###
